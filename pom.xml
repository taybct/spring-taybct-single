<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.mangocrisp</groupId>
    <artifactId>spring-taybct</artifactId>
    <version>3.5.0-beta.1</version>
    <name>Spring TayBct Single</name>
    <description>Spring TayBct Single</description>
    <url>https://github.com/mangocrisp/spring-taybct</url>
    <packaging>pom</packaging>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <organization>
        <name>io.github.mangocrisp</name>
        <url>https://github.com/mangocrisp</url>
    </organization>

    <developers>
        <developer>
            <id>crisp</id>
            <name>Mango Crisp</name>
            <email>15014633363@163.com</email>
            <url>https://mangocrisp.github.io</url>
            <roles>
                <role>Project Manager</role>
                <role>Architect</role>
            </roles>
            <organization>io.github.mangocrisp</organization>
            <organizationUrl>https://github.com/mangocrisp</organizationUrl>
            <timezone>Asia/Shanghai</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:https://github.com/mangocrisp/spring-taybct.git</connection>
        <developerConnection>scm:git:https://gitee.com/mangocrisp/spring-taybct.git</developerConnection>
        <url>https://github.com/mangocrisp/spring-taybct</url>
    </scm>

    <properties>

        <!--框架依赖-->

        <!-- Collection 增强Java集合框架 -->
        <commons-collections4.version>4.4</commons-collections4.version>
        <!--commons-dbutils jdbc 工具类-->
        <commons-dbutils.version>1.8.1</commons-dbutils.version>
        <!-- 文件上传工具类 -->
        <commons-fileupload.version>1.6.0</commons-fileupload.version>
        <!--commons-httpclient-->
        <commons-httpclient.version>3.1</commons-httpclient.version>
        <!-- io常用工具类 -->
        <commons-io.version>2.20.0</commons-io.version>
        <!--commons-lang3-->
        <commons-lang3.version>3.19.0</commons-lang3.version>
        <!-- 公共资源池 -->
        <commons-pool2.version>2.12.1</commons-pool2.version>
        <!--dom4j-->
        <dom4j.version>2.2.0</dom4j.version>
        <!--阿里巴巴(Druid)德鲁伊连接池-->
        <druid.version>1.2.27</druid.version>
        <!--dubbo 3-->
        <dubbo.version>3.3.5</dubbo.version>
        <!--dysmsapi阿里云短信-->
        <dysmsapi.version>2.0.1</dysmsapi.version>
        <!--多数据源-->
        <dynamic-datasource.version>4.3.1</dynamic-datasource.version>
        <!--easyexcel poi 操作导入导出 excel SAX-->
        <easyexcel.version>4.0.3</easyexcel.version>
        <!--easy poi DOM-->
        <easypoi.version>4.5.0</easypoi.version>
        <!--fastdfs的Java客户端框架-->
        <fastdfs-client.version>1.27.2</fastdfs-client.version>
        <!--fastjson2-->
        <fastjson2.version>2.0.59</fastjson2.version>
        <!--feign-httpclient-->
        <feign-httpclient.version>13.6</feign-httpclient.version>
        <!--feign-okhttp-->
        <feign-okhttp.version>13.6</feign-okhttp.version>
        <!--httpclient5-->
        <httpclient5.version>5.5.1</httpclient5.version>
        <!--java 工具类库-->
        <hutool.version>5.8.41</hutool.version>
        <!--jackson-databind-->
        <jackson-databind.version>2.20.0</jackson-databind.version>
        <!--jackson-datatype-jsr310-->
        <jackson-datatype-jsr310.version>2.20.0</jackson-datatype-jsr310.version>
        <!--jdk 版本-->
        <java.version>21</java.version>
        <!--jakarta.servlet-api-->
        <jakarta.servlet-api.version>6.1.0</jakarta.servlet-api.version>
        <!--加密工具-->
        <jdk15on.version>1.70</jdk15on.version>
        <jdk18on.version>1.78.1</jdk18on.version>
        <bcprov-ext-jdk18on.version>1.78.1</bcprov-ext-jdk18on.version>
        <!--junit 测试-->
        <junit.version>4.13.2</junit.version>
        <!--poi 导出依赖-->
        <jxls-core.version>1.0.6</jxls-core.version>
        <!--knife4j-->
        <knife4j.version>4.5.0</knife4j.version>
        <lombok.version>1.18.42</lombok.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <maven.compiler.release>21</maven.compiler.release>
        <!--maven 插件-->
        <maven-compiler-plugin.version>3.14.1</maven-compiler-plugin.version>
        <!-- javadoc插件 -->
        <maven-javadoc-plugin.version>3.12.0</maven-javadoc-plugin.version>
        <!--maven 源码插件-->
        <maven-source-plugin.version>3.3.1</maven-source-plugin.version>
        <!--采用 Annotation Processor 技术，自动生成 java spi 和 Spring boot starter 的配置-->
        <mica-auto.version>3.1.5</mica-auto.version>
        <!--minio 对象存储-->
        <minio.version>8.6.0</minio.version>
        <!--mybatis-plus-->
        <mybatis-plus.version>3.5.14</mybatis-plus.version>
        <!--mybatis-spring-->
        <mybatis-spring.version>3.0.5</mybatis-spring.version>
        <!--mybatis-typehandlers-jsr310-->
        <mybatis-typehandlers-jsr310.version>1.0.2</mybatis-typehandlers-jsr310.version>
        <!--mysql-->
        <mysql-connector-j.version>9.4.0</mysql-connector-j.version>
        <!--nacos 客户端-->
        <nacos-client.version>3.1.0</nacos-client.version>
        <!--JWT 解析库-->
        <nimbus-jose-jwt.version>10.5</nimbus-jose-jwt.version>
        <!--阿里云对象存储-->
        <oss-alibaba.version>3.18.3</oss-alibaba.version>
        <!--oracle-->
        <ojdbc.version>23.9.0.25.07</ojdbc.version>
        <!--oracle字符集支持-->
        <orai18n.version>23.9.0.25.07</orai18n.version>
        <!--对中文多音字处理-->
        <pinyin4j.version>2.5.1</pinyin4j.version>
        <!--    postgresql 驱动   -->
        <postgresql.version>42.7.8</postgresql.version>
        <!--项目打包编码设置-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--基础工具版本-->
        <project.version>3.5.0-beta.1</project.version>
        <!-- Sentinel规则持久化至Nacos配置 -->
        <sentinel-datasource-nacos.version>1.8.9-preview</sentinel-datasource-nacos.version>
        <!--skywalking 日志记录-->
        <skywalking-logback.version>9.5.0</skywalking-logback.version>
        <!--spring 框架版本依赖-->
        <spring.version>6.2.11</spring.version>
        <!--spring boot 版本依赖-->
        <spring-boot.version>3.5.6</spring-boot.version>
        <!--管理和监视Spring Boot的应用程序-->
        <spring-boot-admin.version>3.5.5</spring-boot-admin.version>
        <!--spring cloud 微服务版本依赖-->
        <spring-cloud.version>2025.0.0</spring-cloud.version>
        <!--阿里巴巴版本依赖-->
        <spring-cloud-alibaba.version>2025.0.0.0-preview</spring-cloud-alibaba.version>
        <!--微服务（Spring Cloud Parent）版本-->
        <spring-cloud-build.version>4.3.0</spring-cloud-build.version>
        <!--Spring Security-->
        <spring-security-core.version>6.5.5</spring-security-core.version>
        <!--OAuth2 认证服务器-->
        <spring-security-oauth2-authorization-server.version>1.5.2</spring-security-oauth2-authorization-server.version>
        <!--spring-security-rsa-->
        <spring-security-rsa.version>1.1.5</spring-security-rsa.version>

        <!--项目需要-->

        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
        <!--Registry2仓库的地址，ip:port-->
        <docker.repository.url>127.0.0.1:5000</docker.repository.url>
        <!--<docker.repository.url>registry.cn-beijing.aliyuncs.com</docker.repository.url>-->
        <!--项目名-->
        <docker.registry.name>spring-taybct-single</docker.registry.name>
        <docker.registry.username>taybct</docker.registry.username>
        <docker.registry.password>taybct</docker.registry.password>
        <!--maven 打包工具，可以把各个模块打的包移动到同一个 target 文件夹下面方便部署-->
        <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>
        <!--生成 archetype 模板插件-->
        <maven-archetype-plugin.version>3.4.1</maven-archetype-plugin.version>
        <!--工具版本-->
        <spring-taybct-tools.version>3.5.0-beta.1</spring-taybct-tools.version>
    </properties>

    <!-- 依赖声明 -->
    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-tools-dependencies</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--运行模块-鉴权模块-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-auth</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--运行模块-基础网关-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-gateway</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--运行模块-文件管理-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-admin-file</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--运行模块-日志管理-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-admin-log</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--运行模块-系统模块-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-module-system</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--任务调度模块-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-module-scheduling</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--任务调度模块-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-module-online-doc</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--流程引擎-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-module-lf</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--api 接口-系统-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-api-system</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--公共模块（偏业务）-->
            <dependency>
                <groupId>io.github.mangocrisp</groupId>
                <artifactId>spring-taybct-common</artifactId>
                <version>${project.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!--配置文件处理器的依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <version>${spring-boot.version}</version>
            <optional>true</optional>
        </dependency>
        <!-- lombok getter setter slf4j -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <!--java 工具类库-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>
        <!--自动生成 spring.factories 配置-->
        <dependency>
            <groupId>net.dreamlu</groupId>
            <artifactId>mica-auto</artifactId>
            <version>${mica-auto.version}</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <modules>
        <module>spring-taybct-api</module>
        <module>spring-taybct-modules</module>
        <module>spring-taybct-admin</module>
        <module>spring-taybct-auth</module>
        <module>spring-taybct-common</module>
        <module>run</module>
    </modules>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
        <!--设置子项目不需要指定maven插件版本-->
        <pluginManagement>
            <plugins>
                <!--spring boot 打包插件-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <!--打包源码插件-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                </plugin>
                <!-- javadoc插件 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>
                <!--maven 打包工具-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                </plugin>
                <!--生成 maven 模板-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>${maven-archetype-plugin.version}</version>
                </plugin>
                <!--docker 打包-->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>${dockerfile-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!--spring boot 打包插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
                    <finalName>${project.build.finalName}</finalName>
                    <!-- spring-boot:run 中文乱码解决 -->
                    <jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
                    <!--<skip>true</skip>-->
                    <!--打包本地 jar 包到-->
                    <includeSystemScope>true</includeSystemScope>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk
                    ，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <!-- 源代码使用的JDK版本 -->
                    <source>${java.version}</source>
                    <!-- 需要生成的目标class文件的编译版本 -->
                    <target>${java.version}</target>
                    <!-- 字符集编码 -->
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <showWarnings>true</showWarnings>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <!--打包源码插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- javadoc插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--生成 maven 模板-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-archetype-plugin</artifactId>
                <version>${maven-archetype-plugin.version}</version>
            </plugin>
            <!-- 构建和推动Docker镜像 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <configuration>
                    <!--如果需要自动打包 docker 镜像，就注释这个标签 skip-->
                    <skip>true</skip>
                    <contextDirectory>${maven.multiModuleProjectDirectory}</contextDirectory>
                    <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                    <!--仓库地址/项目名/模块名-->
                    <repository>${docker.repository.url}/${docker.registry.name}/${project.build.finalName}</repository>
                    <!--用户名-->
                    <username>${docker.registry.username}</username>
                    <!--用户密码-->
                    <password>${docker.registry.password}</password>
                    <tag>${project.version}</tag>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>