<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.taybct.module.od.mapper.OnlineDocMapper">

    <resultMap id="BaseResultMap" type="io.github.taybct.module.od.domain.OnlineDoc">
        <id property="id" column="t_online_doc_id" jdbcType="BIGINT"/>
        <result property="createUser" column="t_online_doc_create_user" jdbcType="BIGINT"/>
        <result property="createTime" column="t_online_doc_create_time" jdbcType="TIMESTAMP"/>
        <result property="updateUser" column="t_online_doc_update_user" jdbcType="BIGINT"/>
        <result property="updateTime" column="t_online_doc_update_time" jdbcType="TIMESTAMP"/>
        <result property="isDeleted" column="t_online_doc_is_deleted" jdbcType="SMALLINT"/>
        <result property="name" column="t_online_doc_name" jdbcType="VARCHAR"/>
        <result property="share" column="t_online_doc_share" jdbcType="SMALLINT"/>
        <result property="uniqueField" column="t_online_doc_unique_field" jdbcType="VARCHAR"/>
        <result property="properties" column="t_online_doc_properties" jdbcType="OTHER"/>
        <result property="deptId" column="t_online_doc_dept_id" jdbcType="BIGINT"/>
        <result property="deptName" column="t_online_doc_dept_name" jdbcType="VARCHAR"/>
        <result property="data" column="t_online_doc_data" jdbcType="OTHER"/>
        <result property="createUserName" column="t_online_doc_create_user_name" jdbcType="VARCHAR"/>
        <result property="updateUserName" column="t_online_doc_update_user_name" jdbcType="VARCHAR"/>
    </resultMap>

    <!--分页返回结果-->
    <resultMap id="BasePageResultMap" type="io.github.taybct.module.od.vo.OnlineDocVO"
               extends="BaseResultMap">
        <!--这里返回的是可扩展的返回结果 vo 之类的-->
        <!--<collection property="实体类里面的属性" javaType="返回的集合是什么集合的类型如：java.util.List" resultMap="指定映射集合类元素的类型的 resultMap"/>-->
        <!--<association property="实体类里面的属性" column="关联的另一张表的主键" javaType="另一张表对应的实体类" resultMap="指定映射属性对应对象的 resultMap"/>-->
        <result property="isAdmin" column="t_online_doc_vo_is_admin" jdbcType="SMALLINT"/>
    </resultMap>

    <resultMap id="BaseDetailResultMap" type="io.github.taybct.module.od.vo.OnlineDocVO"
               extends="BaseResultMap">
        <result property="isAdmin" column="t_online_doc_vo_is_admin" jdbcType="SMALLINT"/>
        <collection property="onlineDocPermitSet" javaType="java.util.Set"
                    resultMap="io.github.taybct.module.od.mapper.OnlineDocPermitMapper.BaseResultMap"/>
    </resultMap>

    <!--表名-->
    <sql id="Base_Table_Name">t_online_doc</sql>

    <!--列名-->
    <sql id="Base_Column_List">
        t_online_doc
        .
        id
        as t_online_doc_id,t_online_doc.create_user as t_online_doc_create_user,t_online_doc.create_time as t_online_doc_create_time,
        t_online_doc.update_user as t_online_doc_update_user,t_online_doc.update_time as t_online_doc_update_time,t_online_doc.is_deleted as t_online_doc_is_deleted,
        t_online_doc.name as t_online_doc_name,t_online_doc.share as t_online_doc_share,
        t_online_doc.unique_field as t_online_doc_unique_field,t_online_doc.properties as t_online_doc_properties,t_online_doc.dept_id as t_online_doc_dept_id,
        t_online_doc.dept_name as t_online_doc_dept_name,t_online_doc.create_user_name as t_online_doc_create_user_name
                                ,t_online_doc.update_user_name as t_online_doc_update_user_name
    </sql>

    <sql id="JSON_Column">
        t_online_doc
        .
        data
        as t_online_doc_data
    </sql>

    <select id="listMap" resultType="java.util.Map">
        select
        <choose>
            <when test="mo.selectedFieldSet != null and mo.selectedFieldSet.size() > 0">
                <foreach collection="mo.selectedFieldSet" separator="," item="field">
                    temp.${field}
                </foreach>
            </when>
            <otherwise>
                temp.*
            </otherwise>
        </choose>
        from (
        select s.*
        from (
        <include refid="page_sql"/>
        ) s
        ) temp
    </select>

    <update id="updateBatchByCondition">
        update
        <include refid="Base_Table_Name"/>
        <set>
            <if test="mo.bean.createUser != null">
                ,create_user = #{mo.bean.createUser,jdbcType=BIGINT}
            </if>
            <if test="mo.bean.createTime != null">
                ,create_time = #{mo.bean.createTime,jdbcType=TIMESTAMP}
            </if>
            <if test="mo.bean.updateUser != null">
                ,update_user = #{mo.bean.updateUser,jdbcType=BIGINT}
            </if>
            <if test="mo.bean.updateTime != null">
                ,update_time = #{mo.bean.updateTime,jdbcType=TIMESTAMP}
            </if>
            <if test="mo.bean.isDeleted != null">
                ,is_deleted = #{mo.bean.isDeleted,jdbcType=SMALLINT}
            </if>
            <if test="mo.bean.name != null">
                ,name = #{mo.bean.name,jdbcType=VARCHAR}
            </if>
            <if test="mo.bean.share != null">
                ,share = #{mo.bean.share,jdbcType=SMALLINT}
            </if>
            <if test="mo.bean.uniqueField != null">
                ,unique_field = #{mo.bean.uniqueField,jdbcType=VARCHAR}
            </if>
            <if test="mo.bean.properties != null">
                ,properties = #{mo.bean.properties,jdbcType=OTHER}
            </if>
            <if test="mo.bean.deptId != null">
                ,dept_id = #{mo.bean.deptId,jdbcType=BIGINT}
            </if>
            <if test="mo.bean.deptName != null">
                ,dept_name = #{mo.bean.deptName,jdbcType=VARCHAR}
            </if>
            <if test="mo.bean.data != null">
                ,data = #{mo.bean.data,jdbcType=OTHER}
            </if>
            <if test="mo.bean.createUserName != null">
                ,data = #{mo.bean.createUserName,jdbcType=VARCHAR}
            </if>
            <if test="mo.bean.updateUserName != null">
                ,data = #{mo.bean.updateUserName,jdbcType=VARCHAR}
            </if>
        </set>
        <where>
            <!--主键-->
            <if test="mo.params.id != null">
                and t_online_doc.id = #{mo.params.id}
            </if>
            <!--当前表的查询条件-->
            <if test="mo.params.onlineDocQueryDTO != null">
                <include refid="DTO_Condition"/>
            </if>
            <!--TODO 继续添加查询条件-->
        </where>
    </update>

    <update id="updateOnlyOfficeFileUrl">
        UPDATE t_online_doc
        SET data        = #{data},
            update_user = #{updateUser},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <!--查询总数-->
    <select id="total" resultType="java.lang.Long">
        select count(1) from (
        <include refid="Base_Query"/>
        ) temp
    </select>

    <!--查询分页-->
    <sql id="page_sql">
        select t.*
        from (
        <include refid="Base_Page_Query"/>
        ) t
        <if test="mo.page != null and mo.page.sort != null">
            order by
            <foreach collection="mo.page.sort" item="item" separator=",">t.t_online_doc_${item}</foreach>
        </if>
    </sql>
    <!--查询分页-->
    <select id="page" resultMap="BasePageResultMap">
        select
        <choose>
            <when test="mo.selectedFieldSet != null and mo.selectedFieldSet.size() > 0">
                <foreach collection="mo.selectedFieldSet" separator="," item="field">
                    temp.${field}
                </foreach>
            </when>
            <otherwise>
                temp.*
            </otherwise>
        </choose>
        from (
        <include refid="page_sql"/>
        ) temp
    </select>

    <!--查询详情-->
    <sql id="detail_sql">
        select t.*
        ,
        <include refid="io.github.taybct.module.od.mapper.OnlineDocPermitMapper.Base_Column_List"/>
        from (
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="JSON_Column"/>
        <if test="_login_user_ != null">
            ,(select t_online_doc_permit.is_admin from t_online_doc_permit where
            t_online_doc_permit.doc_id = t_online_doc.id
            <choose>
                <when test="_db_type_db_ == 'postgresql'">
                    and t_online_doc_permit.user_id = #{_login_user_.uid}::int8 limit 1
                </when>
                <otherwise>
                    and t_online_doc_permit.user_id = #{_login_user_.uid} limit 1
                </otherwise>
            </choose>
            ) as t_online_doc_vo_is_admin
        </if>
        from
        <include refid="Base_Table_Name"/>
        <include refid="Base_Condition"/>
        ) t
        left join t_online_doc_permit on t.t_online_doc_id = t_online_doc_permit.doc_id
    </sql>
    <!--查询详情-->
    <select id="detail" resultMap="BaseDetailResultMap">
        select
        <choose>
            <when test="mo.selectedFieldSet != null and mo.selectedFieldSet.size() > 0">
                <foreach collection="mo.selectedFieldSet" separator="," item="field">
                    temp.${field}
                </foreach>
            </when>
            <otherwise>
                temp.*
            </otherwise>
        </choose>
        from (
        <include refid="detail_sql"/>
        ) temp
    </select>

    <!--基础查询-->
    <sql id="Base_Query">
        select
        <include refid="Base_Column_List"/>
        <if test="_login_user_ != null">
            ,(select t_online_doc_permit.is_admin from t_online_doc_permit where
            t_online_doc_permit.doc_id = t_online_doc.id
            <choose>
                <when test="_db_type_db_ == 'postgresql'">
                    and t_online_doc_permit.user_id = #{_login_user_.uid}::int8 limit 1
                </when>
                <otherwise>
                    and t_online_doc_permit.user_id = #{_login_user_.uid} limit 1
                </otherwise>
            </choose>
            ) as t_online_doc_vo_is_admin
        </if>
        from
        <include refid="Base_Table_Name"/>
        <include refid="Base_Condition"/>
    </sql>

    <!--对象参数查询条件-->
    <sql id="DTO_Condition">
        <!--主键-->
        <if test="mo.params.onlineDocQueryDTO.id != null">
            and t_online_doc.id = #{mo.params.onlineDocQueryDTO.id}
        </if>
        <!--主键选择-->
        <if test="mo.params.onlineDocQueryDTO.idSelection != null and mo.params.onlineDocQueryDTO.idSelection.size() > 0">
            and t_online_doc.id in
            <foreach collection="mo.params.onlineDocQueryDTO.idSelection" open="(" separator="," close=")"
                     item="id">
                #{id}
            </foreach>
        </if>
        <!--创建人-->
        <if test="mo.params.onlineDocQueryDTO.createUser != null">
            and t_online_doc.create_user = #{mo.params.onlineDocQueryDTO.createUser}
        </if>
        <!--创建时间-->
        <if test="mo.params.onlineDocQueryDTO.createTime_ge != null">
            and t_online_doc.create_time &gt;= #{mo.params.onlineDocQueryDTO.createTime_ge}
        </if>
        <if test="mo.params.onlineDocQueryDTO.createTime_le != null">
            and t_online_doc.create_time &lt;= #{mo.params.onlineDocQueryDTO.createTime_le}
        </if>
        <!--修改人-->
        <if test="mo.params.onlineDocQueryDTO.updateUser != null">
            and t_online_doc.update_user = #{mo.params.onlineDocQueryDTO.updateUser}
        </if>
        <!--修改时间-->
        <if test="mo.params.onlineDocQueryDTO.updateTime_ge != null">
            and t_online_doc.update_time &gt;= #{mo.params.onlineDocQueryDTO.updateTime_ge}
        </if>
        <if test="mo.params.onlineDocQueryDTO.updateTime_le != null">
            and t_online_doc.update_time &lt;= #{mo.params.onlineDocQueryDTO.updateTime_le}
        </if>
        <!--是否已删除-->
        <if test="mo.params.onlineDocQueryDTO.isDeleted != null">
            and t_online_doc.is_deleted = #{mo.params.onlineDocQueryDTO.isDeleted}
        </if>
        <!--文档名称-->
        <if test="mo.params.onlineDocQueryDTO.name != null and mo.params.onlineDocQueryDTO.name != ''">
            and t_online_doc.name like '%' || #{mo.params.onlineDocQueryDTO.name} || '%'
        </if>
        <!--文档是否共享-->
        <if test="mo.params.onlineDocQueryDTO.share != null">
            and t_online_doc.share = #{mo.params.onlineDocQueryDTO.share}
        </if>
        <!--唯一字段-->
        <if test="mo.params.onlineDocQueryDTO.uniqueField != null and mo.params.onlineDocQueryDTO.uniqueField != ''">
            and t_online_doc.unique_field = #{mo.params.onlineDocQueryDTO.uniqueField}
        </if>
        <!--文档属性设置（字段等）-->
        <if test="mo.params.onlineDocQueryDTO.properties != null">
            and t_online_doc.properties = #{mo.params.onlineDocQueryDTO.properties}
        </if>
        <!--所属部门id-->
        <if test="mo.params.onlineDocQueryDTO.deptId != null">
            and t_online_doc.dept_id = #{mo.params.onlineDocQueryDTO.deptId}
        </if>
        <!--所属部门名称-->
        <if test="mo.params.onlineDocQueryDTO.deptName != null and mo.params.onlineDocQueryDTO.deptName != ''">
            and t_online_doc.dept_name like '%' || #{mo.params.onlineDocQueryDTO.deptName} || '%'
        </if>
        <!--创建姓名-->
        <if test="mo.params.onlineDocQueryDTO.createUserName != null and mo.params.onlineDocQueryDTO.createUserName != ''">
            and t_online_doc.create_user_name like '%' || #{mo.params.onlineDocQueryDTO.createUserName}
            || '%'
        </if>
        <!--关键字搜索-->
        <if test="mo.params.onlineDocQueryDTO.keyWords != null and mo.params.onlineDocQueryDTO.keyWords != ''">
            and (
            t_online_doc.create_user_name like '%' || #{mo.params.onlineDocQueryDTO.keyWords} || '%'
            or t_online_doc.create_user_name like '%' || #{mo.params.onlineDocQueryDTO.keyWords} || '%'
            or t_online_doc.name like '%' || #{mo.params.onlineDocQueryDTO.keyWords} || '%'
            )
        </if>
    </sql>

    <sql id="Dept_Filter">
        <choose>
            <when test="_db_type_db_ == 'postgresql'">
                and CAST(#{_login_user_dept_.id} as VARCHAR) = ANY(STRING_TO_ARRAY(sys_dept.pid_all, ','))
            </when>
            <when test="_db_type_db_ == 'mysql'">
                and FIND_IN_SET(#{_login_user_dept_.id},sys_dept.pid_all)
            </when>
            <when test="_db_type_db_ == 'sqlite'">
                and ',' || sys_dept.pid_all || ',' like '%,' || #{_login_user_dept_.id} || ',%'
            </when>
            <when test="_db_type_db_ == 'oracle'">
                and INSTR(sys_dept.pid_all, TO_CHAR(#{_login_user_dept_.id}))>0
            </when>
        </choose>
    </sql>

    <!--基础条件-->
    <sql id="Base_Condition">
        <where>
            <if test="mo.conditions != null and mo.conditions.basic != null">
                and (
                ${mo.conditions.basic}
                )
            </if>
            <!--主键-->
            <if test="mo.params.id != null">
                and t_online_doc.id = #{mo.params.id}
            </if>
            <if test="_login_user_dept_ != null || _login_user_ != null">
                and (
                (t_online_doc.share = 0
                <if test="_login_user_ != null">
                    <choose>
                        <when test="_db_type_db_ == 'postgresql'">
                            AND t_online_doc.create_user = #{_login_user_.uid}::int8
                        </when>
                        <otherwise>
                            AND t_online_doc.create_user = #{_login_user_.uid}
                        </otherwise>
                    </choose>
                </if>
                <if test="_login_user_dept_ != null">
                    and (exists(
                    select 1 from sys_dept where sys_dept.id = t_online_doc.dept_id
                    <include refid="Dept_Filter"/>
                    ) or t_online_doc.dept_id = #{_login_user_dept_.id})
                </if>
                )
                or (
                exists(
                select 1 from t_online_doc_permit
                where t_online_doc_permit.doc_id = t_online_doc.id
                and (
                <if test="_login_user_dept_ != null">
                    t_online_doc_permit.dept_id = #{_login_user_dept_.id}
                    or
                    exists(
                    select 1 from sys_dept where sys_dept.id = t_online_doc_permit.dept_id
                    <include refid="Dept_Filter"/>
                    )
                </if>
                <if test="_login_user_dept_ != null and _login_user_dept_ != null">
                    OR
                </if>
                <if test="_login_user_ != null">
                    <choose>
                        <when test="_db_type_db_ == 'postgresql'">
                            t_online_doc_permit.user_id = #{_login_user_.uid}::int8
                        </when>
                        <otherwise>
                            t_online_doc_permit.user_id = #{_login_user_.uid}
                        </otherwise>
                    </choose>
                </if>
                )
                )
                <if test="_login_user_dept_ != null">
                    or exists(
                    select 1 from sys_dept where sys_dept.id = t_online_doc.dept_id
                    <include refid="Dept_Filter"/>
                    )
                    or t_online_doc.dept_id = #{_login_user_dept_.id}
                </if>
                <if test="_login_user_ != null">
                    <choose>
                        <when test="_db_type_db_ == 'postgresql'">
                            or t_online_doc.create_user = #{_login_user_.uid}::int8
                        </when>
                        <otherwise>
                            or t_online_doc.create_user = #{_login_user_.uid}
                        </otherwise>
                    </choose>
                </if>
                )
                )
            </if>
            <if test="mo.params.onlineDocQueryDTO != null">
                <include refid="DTO_Condition"/>
            </if>
            <!--TODO 继续添加查询条件-->
        </where>
    </sql>

    <sql id="Base_Page_Order_By">
        <if test="mo.page != null and mo.page.sort != null">
            order by
            <foreach collection="mo.page.sort" item="item" separator=",">t_online_doc.${item}</foreach>
        </if>
    </sql>

    <!--分布查询-->
    <sql id="Base_Page_Query">
        <if test="mo.page != null">
            <choose>
                <when test="mo.page.offset != null and mo.page.pageSize != null">

                    <if test="_db_type_db_ == 'mysql' or _db_type_db_ == 'sqlite' or _db_type_db_ == 'postgresql'">
                        <include refid="Base_Query"/>
                        <include refid="Base_Page_Order_By"/>
                        limit #{mo.page.pageSize} offset #{mo.page.offset}
                    </if>

                    <if test="_db_type_db_ == 'oracle'">
                        SELECT offset_start.* FROM (
                        SELECT rownum rn,offset_end.* FROM (

                        <include refid="Base_Query"/>
                        <include refid="Base_Page_Order_By"/>

                        ) offset_end WHERE rownum <![CDATA[<=]]> (#{mo.page.offset}+#{mo.page.pageSize})
                        ) offset_start WHERE offset_start.rn <![CDATA[>]]> #{mo.page.offset}
                    </if>

                </when>
                <otherwise>
                    <include refid="Base_Query"/>
                    <include refid="Base_Page_Order_By"/>
                </otherwise>
            </choose>
        </if>
    </sql>

</mapper>
