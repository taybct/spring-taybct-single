<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.taybct.module.lf.mapper.TodoMapper">

    <resultMap id="BaseResultMap" type="io.github.taybct.module.lf.domain.Todo">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="nodeId" column="node_id" jdbcType="VARCHAR"/>
        <result property="roleId" column="role_id" jdbcType="BIGINT"/>
        <result property="userId" column="user_id" jdbcType="BIGINT"/>
        <result property="deptId" column="dept_id" jdbcType="BIGINT"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="processId" column="process_id" jdbcType="BIGINT"/>
        <result property="status" column="status" jdbcType="SMALLINT"/>
        <result property="type" column="type" jdbcType="VARCHAR"/>
        <result property="todoStatus" column="todo_status" jdbcType="SMALLINT"/>
        <result property="doneStatus" column="done_status" jdbcType="SMALLINT"/>
        <result property="designId" column="design_id" jdbcType="BIGINT"/>
        <result property="todoType" column="todo_type" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        ,node_id,role_id,
        user_id,dept_id,create_time,
        process_id,status,type,
        todo_status,done_status,design_id,
        todo_type
    </sql>

    <resultMap id="TodoPageResultMap" type="io.github.taybct.module.lf.vo.ProcessListVO">
        <id property="todoId" column="todo_id" jdbcType="BIGINT"/>
        <result property="releaseId" column="release_id" jdbcType="BIGINT"/>
        <result property="designId" column="design_id" jdbcType="BIGINT"/>
        <result property="designName" column="design_name" jdbcType="VARCHAR"/>
        <result property="processId" column="process_id" jdbcType="BIGINT"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="createUser" column="create_user" jdbcType="BIGINT"/>
        <result property="createUserName" column="create_user_name" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="nodeId" column="node_id" jdbcType="VARCHAR"/>
        <result property="nodeText" column="node_text" jdbcType="VARCHAR"/>
        <result property="icon" column="process_icon" jdbcType="VARCHAR"/>
        <result property="lastVersion" column="design_last_version" jdbcType="BIGINT"/>
        <result property="processStatus" column="process_status" jdbcType="SMALLINT"/>
        <result property="status" column="lt_status" jdbcType="SMALLINT"/>
        <result property="type" column="lt_type" jdbcType="VARCHAR"/>
        <result property="todoStatus" column="lt_todo_status" jdbcType="SMALLINT"/>
        <result property="doneStatus" column="lt_done_status" jdbcType="SMALLINT"/>
        <result property="todoType" column="todo_type" jdbcType="SMALLINT"/>
    </resultMap>

    <sql id="todoListQuery">
        select
        lt.id todo_id,
        lp.release_id release_id,
        lt.design_id design_id,
        ld.name design_name,
        lt.process_id process_id,
        lp.title title,
        lp.create_user create_user,
        su.nickname create_user_name,
        lp.create_time create_time,
        lt.node_id node_id,
        ln.text node_text,
        lp.icon process_icon,
        ld.last_version design_last_version,
        lp.status process_status,
        lt.status lt_status,
        lt.type lt_type,
        lt.todo_status lt_todo_status,
        lt.done_status lt_done_status,
        lt.todo_type todo_type
        from lf_todo lt
        left join lf_nodes ln on lt.node_id = ln.id
        left join lf_process lp on lt.process_id = lp.id
        left join lf_design ld on lt.design_id = ld.id
        left join sys_user su on lp.create_user = su.id
        <where>
            <if test="params.status != null">
                and lt.status = #{params.status}
            </if>
            <if test="params.todoStatus != null">
                and lt.todo_status = #{params.todoStatus}
            </if>
            <if test="params.doneStatus != null">
                and lt.done_status = #{params.doneStatus}
            </if>
            <if test="params.type != null">
                and lt.type = #{params.type}
            </if>
            <if test="params.designId != null">
                and lt.design_id = #{params.designId}
            </if>
            <if test="params.processId != null">
                and lt.process_id = #{params.processId}
            </if>
            <if test="params.processStatus != null">
                and lp.status = #{params.processStatus}
            </if>
            <if test="params.releaseId != null">
                and lp.release_id = #{params.releaseId}
            </if>
            <if test="params.todoType != null">
                and lt.todo_type = #{params.todoType}
            </if>
            <if test="params.title != null">
                <choose>
                    <when test="_db_type_db_ == 'sqlite'">
                        and ld.name like '%' || #{params.title} || '%'
                    </when>
                    <otherwise>
                        and ld.name like concat(concat('%',#{params.title}),'%')
                    </otherwise>
                </choose>
            </if>
            <if test="_login_user_ != null">
                and (
                lt.user_id =
                <choose>
                    <when test="_db_type_db_ == 'postgresql'">CAST(#{_login_user_.uid} AS BIGINT)</when>
                    <otherwise>#{_login_user_.uid}</otherwise>
                </choose>
                or exists(select 1 from sys_user_role where role_id = lt.role_id and user_id =
                <choose>
                    <when test="_db_type_db_ == 'postgresql'">CAST(#{_login_user_.uid} AS BIGINT)</when>
                    <otherwise>#{_login_user_.uid}</otherwise>
                </choose>
                )
                or exists(select 1 from sys_user_dept where dept_id = lt.dept_id and user_id =
                <choose>
                    <when test="_db_type_db_ == 'postgresql'">CAST(#{_login_user_.uid} AS BIGINT)</when>
                    <otherwise>#{_login_user_.uid}</otherwise>
                </choose>
                )
                )
            </if>
        </where>
    </sql>

    <select id="todoListCount" resultType="java.lang.Long">
        select count(1) from (
        <include refid="todoListQuery"/>
        ) temp
    </select>

    <select id="todoList" resultMap="TodoPageResultMap">
        <choose>
            <when test="offset != null and size != null">

                <if test="_db_type_db_ == 'mysql' or _db_type_db_ == 'sqlite' or _db_type_db_ == 'postgresql'">
                    <include refid="todoListQuery"/>
                    <!--<if test="pageOrder != null">
                        order by lt.create_time desc
                    </if>-->
                    order by lt.create_time desc
                    limit #{size} offset #{offset}
                </if>

                <if test="_db_type_db_ == 'oracle'">
                    SELECT offset_start.* FROM (
                    SELECT rownum rn,offset_end.* FROM (

                    <include refid="todoListQuery"/>
                    <!--<if test="pageOrder != null">
                        order by lt.create_time desc
                    </if>-->
                    order by lt.create_time desc
                    ) offset_end WHERE rownum <![CDATA[<=]]> (#{offset}+#{size})
                    ) offset_start WHERE offset_start.rn <![CDATA[>]]> #{offset}
                </if>
            </when>
            <otherwise>
                <include refid="todoListQuery"/>
                <!--<if test="pageOrder != null">
                    order by lt.create_time desc
                </if>-->
                order by lt.create_time desc
            </otherwise>
        </choose>
    </select>

    <resultMap id="UnOperatorsResultMap" type="io.github.taybct.module.lf.vo.UnOperator">
        <id property="processId" column="process_id" jdbcType="BIGINT"/>
        <result property="id" column="id" jdbcType="BIGINT"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="type" column="type" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="queryUnOperators" resultMap="UnOperatorsResultMap">
        SELECT T.*,
        CASE

        WHEN T.TYPE = 'role' THEN
        sr.NAME
        WHEN T.TYPE = 'user' THEN
        su.nickname
        WHEN T.TYPE = 'dept' THEN
        sd.NAME
        END NAME
        FROM
        (
        SELECT
        process_id,
        CASE

        WHEN role_id IS NOT NULL THEN
        role_id
        WHEN user_id IS NOT NULL THEN
        user_id
        WHEN dept_id IS NOT NULL THEN
        dept_id
        END ID,
        CASE

        WHEN role_id IS NOT NULL THEN
        'role'
        WHEN user_id IS NOT NULL THEN
        'user'
        WHEN dept_id IS NOT NULL THEN
        'dept'
        END TYPE
        FROM
        lf_todo
        WHERE
        process_id in
        <foreach collection="processIdSet" item="processId" open="(" separator="," close=")" index="index">
            #{processId}
        </foreach>
        )
        T LEFT JOIN sys_user su ON T.ID = su.
        ID LEFT JOIN sys_role sr ON T.ID = sr.
        ID LEFT JOIN sys_dept sd ON T.ID = sd.ID
    </select>

    <select id="todoCount" resultType="io.github.taybct.module.lf.vo.TodoCount">
        select lt.${kind} key,
        count(1) count
        from lf_todo lt
        <where>
            status = #{status}
            and lt.${kind} is not null
            <if test="_login_user_ != null">
                and (
                lt.user_id =
                <choose>
                    <when test="_db_type_db_ == 'postgresql'">CAST(#{_login_user_.uid} AS BIGINT)</when>
                    <otherwise>#{_login_user_.uid}</otherwise>
                </choose>
                or exists(select 1 from sys_user_role where role_id = lt.role_id and user_id =
                <choose>
                    <when test="_db_type_db_ == 'postgresql'">CAST(#{_login_user_.uid} AS BIGINT)</when>
                    <otherwise>#{_login_user_.uid}</otherwise>
                </choose>
                )
                or exists(select 1 from sys_user_dept where dept_id = lt.dept_id and user_id =
                <choose>
                    <when test="_db_type_db_ == 'postgresql'">CAST(#{_login_user_.uid} AS BIGINT)</when>
                    <otherwise>#{_login_user_.uid}</otherwise>
                </choose>
                )
                )
            </if>
        </where>
        GROUP BY lt.${kind}
    </select>

</mapper>
